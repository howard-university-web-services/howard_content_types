<?php

/**
 * @file
 * Howard Content Types module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\media\Entity\Media;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function howard_content_types_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.howard_content_types':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      } else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_node().
 */
function howard_content_types_preprocess_node(&$variables) {
  $node = $variables['elements']['#node'];
  $view_mode = $variables['view_mode'];
  $bundle = $node->bundle();

  // Hero Images.
  $variables['hero_image'] = '/themes/contrib/hu_general/idfive-component-library/build/img/graduates_talking.jpg';
  if ($node->hasField('field_hc_header_image')) {
    $hero_image = $node->get('field_hc_header_image')->getValue();
    if ($hero_image && !empty($hero_image)) {
      $entity = Media::load($hero_image[0]['target_id']);
      if (isset($entity) && $entity->field_media_image->entity !== NULL && $entity->field_media_image->entity->getFileUri() !== NULL) {
        $variables['hero_image'] = ImageStyle::load('hc_hero_image')->buildUrl($entity->field_media_image->entity->getFileUri());
      }
    }
  }
  $variables['show_hero_image'] = TRUE;
  if ($node->hasField('field_hc_hide_header_image')) {
    $value = $node->get('field_hc_hide_header_image')->getValue();
    if ($value[0]['value'] == '1') {
      $variables['show_hero_image'] = FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function howard_content_types_preprocess_views_view(&$variables) {
  if ($variables['view']->id() === 'hc_media_browser' || $variables['view']->id() === 'media_entity_browser') {
    $variables['view_array']['#attached']['library'][] = 'howard_content_types/view';
  }
}

/**
 * Implements hook_node_form_alter().
 */
function howard_content_types_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'howard_content_types/admin';
  // Remove preview from all
  $form['actions']['preview']['#access'] = FALSE;
  if (preg_match('/node_hc_/', $form_id)) {
    if (isset($form['promote'])) {
      unset($form['promote']);
    }
    if (isset($form['sticky'])) {
      unset($form['sticky']);
    }
  }
}

/**
 * Removes field_hc_hide_for_nonhoward from HC Page CT
 */
function howard_content_types_update_8013() {
  // Deleting field.
  if (FieldConfig::loadByName('node', 'hc_page', 'field_hc_hide_for_nonhoward') !== NULL ) {
    FieldConfig::loadByName('node', 'hc_page', 'field_hc_hide_for_nonhoward')->delete();
  }

  // Deleting field storage.
  if (FieldStorageConfig::loadByName('node', 'field_hc_hide_for_nonhoward') !== NULL ) {
    FieldStorageConfig::loadByName('node', 'field_hc_hide_for_nonhoward')->delete();
  }
}
