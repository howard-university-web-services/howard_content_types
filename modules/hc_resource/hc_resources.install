<?php

/**
 * @file
 * Hc_resources install file.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_install().
 *
 * Creates default terms.
 */
function hc_resources_install() {
  _hc_resources_create_resource_terms();
}

/**
 * Implements hook_uninstall().
 *
 * Removes content type.
 */
function hc_resources_uninstall() {
  _hc_resources_remove_entity_and_content();
}

/**
 * Updates to media browser, taxonomies, etc.
 */
function _hc_resources_create_resource_terms() {
  $categories = [
    'Student Resources',
    'Alumni Resources',
    'Faculty & Staff Resources',
  ];
  foreach ($categories as $category) {
    $term = Term::create([
      'parent' => [],
      'name' => $category,
      'vid' => 'hc_resource_category',
    ])->save();
  }
}

/**
 * Remove all resource nodes, remove content type, remove vocabulary.
 */
function _hc_resources_remove_entity_and_content() {
  // Delete hc_resource nodes.
  $storage_handler = \Drupal::entityTypeManager()
    ->getStorage('node');
  $nodes = $storage_handler->loadByProperties(['type' => 'hc_resource']);
  $storage_handler->delete($nodes);
  // Delete hc_resource content type.
  $content_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('hc_resource');
  $content_type->delete();
  // Delete hc_resource_category vocabulary.
  $vocab = Vocabulary::load('hc_resource_category');
  if ($vocab) {
    $vocab->delete();
  }
}

/**
 * Updates changing format of contact address.
 */
/**
 * Change format of contact address to a text_long.
 */
function hc_resources_update_8001()
{
  $fields = [
    'field_hc_resource_contact_addres' => [
      'table' => 'node__field_hc_resource_contact_addres',
      'revision_table' => 'node_revision__field_hc_resource_contact_addres',
    ],
  ];

  $database = \Drupal::database();

  foreach ($fields as $field_name => $f) {
    $table = $f['table'];
    $revision_table = $f['revision_table'];
    $entity_type = 'node';

    // Get field storage.
    $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

    // Check if field exist.
    if (is_null($field_storage)) {
      continue;
    }

    // Store data to an array so that we can restore it once the update is complete.
    $rows = NULL;
    $revision_rows = NULL;
    if ($database->schema()->tableExists($table)) {
      $rows = $database->select($table, 'n')->fields('n')->execute()
        ->fetchAll();
      $revision_rows = $database->select($revision_table, 'n')->fields('n')->execute()
        ->fetchAll();
    }

    // Save new field configs & delete existing fields.
    $new_fields = array();
    foreach ($field_storage->getBundles() as $bundle => $label) {
      $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
      $new_field = $field->toArray();
      $new_field['field_type'] = 'text_long';
      $new_fields[] = $new_field;
      // Delete field.
      $field->delete();
    }

    // Create new storage configs from existing.
    $new_field_storage = $field_storage->toArray();
    $new_field_storage['type'] = 'text_long';
    $new_field_storage['module'] = 'text_long';

    // Purge deleted fields data to create new fields.
    field_purge_batch(250);

    // Create new fieldstorage.
    FieldStorageConfig::create($new_field_storage)->save();

    // Create new fields for all bundles.
    foreach ($new_fields as $new_field) {
      $new_field = FieldConfig::create($new_field);
      $new_field->save();
    }
    // Restore existing data in fields & revision tables.
    if (!is_null($rows)) {
      foreach ($rows as $row) {
        $row = (array) $row;
        $database->insert($table)->fields($row)->execute();
      }
    }
    if (!is_null($revision_rows)) {
      foreach ($revision_rows as $row) {
        $row = (array) $row;
        $database->insert($revision_table)->fields($row)->execute();
      }
    }
  }
  \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.hc_resource.default')
    ->setComponent('field_hc_resource_contact_addres', [
      'weight' => 2,
    ])->save();

  \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.hc_resource.default')
    ->setComponent('field_hc_resource_contact_addres', [
      'type' => 'text_default',
      'label' => 'hidden',
    ])->save();
}

/**
 * Change display form to close ks widgets
 */
function hc_resources_update_8007()
{
  \Drupal::service('config.installer')->installDefaultConfig('module', 'hc_resources');
}

/**
 * Enable paragraph types by default and improve form, view
 */
function hc_resources_update_8008()
{
  \Drupal::service('config.installer')->installDefaultConfig('module', 'hc_resources');
}

/**
 * Updates to add moderation sections to all content types.
 */
function hc_resources_update_8009() {
  \Drupal::service('config.installer')->installDefaultConfig('module', 'hc_resources');
}

/**
 * Updates to allow resources view to accept multiple values, https://trello.com/c/WTNRqiiA/916-resources-widget-concatenation-of-multiple-resources-when-limited-by-category.
 */
function hc_resources_update_8010() {
  \Drupal::service('config.installer')->installDefaultConfig('module', 'hc_resources');
}